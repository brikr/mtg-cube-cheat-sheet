{"version":3,"sources":["reportWebVitals.ts","api/scryfall.ts","theme/theme.ts","util/oracle-text-to-html.ts","components/Card/Card.tsx","components/Card/index.tsx","constants/cards.ts","components/Main/index.tsx","components/Main/Main.tsx","theme/global-style.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SCRYFALL_CARD_API_PREFIX","fetchCard","scryfallId","a","fetch","response","json","body","ok","Error","status","id","name","manaCost","mana_cost","typeLine","type_line","oracleText","oracle_text","scryfallUri","scryfall_uri","imageUri","image_uris","normal","theme","staticColors","cardBorder","device","tablet","lightTheme","colors","background","color","darkTheme","styled","originalStyled","DEFAULT_SYMBOL_STYLES","css","oracleTextToHTML","html","replaceAll","symbols","forEach","symbol","abbrEl","english","svg_uri","Container","div","CardImage","img","CardInfo","TitleLine","Title","h2","ManaCost","span","TypeLine","p","Card","useState","card","setCard","useEffect","scryfallCard","src","dangerouslySetInnerHTML","__html","CARDS","Main","map","idx","GlobalStyle","createGlobalStyle","App","darkModeMatch","window","matchMedia","matches","prefersDarkMode","setPrefersDarkMode","addEventListener","e","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b750219c.chunk.js","sourcesContent":["import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ScryfallCard } from \"types/scryfall-card\";\n\nexport const SCRYFALL_CARD_API_PREFIX = \"https://api.scryfall.com/cards/\";\n\nexport async function fetchCard(scryfallId: string): Promise<ScryfallCard> {\n  const response = await fetch(`${SCRYFALL_CARD_API_PREFIX}/${scryfallId}`);\n  const body = await response.json();\n\n  if (!response.ok) {\n    throw new Error(`Got ${response.status} from Scryfall:\\n${body}`);\n  }\n\n  return {\n    id: body.id,\n    name: body.name,\n    manaCost: body.mana_cost,\n    typeLine: body.type_line,\n    oracleText: body.oracle_text,\n    scryfallUri: body.scryfall_uri,\n    imageUri: body.image_uris.normal,\n  };\n}\n","import originalStyled, { ThemedStyledInterface } from \"styled-components\";\n\nconst theme = {\n  staticColors: {\n    cardBorder: \"#181510\",\n  },\n  device: {\n    tablet: \"768px\",\n  },\n};\n\nexport const lightTheme = {\n  ...theme,\n  colors: {\n    background: \"#f5f6fa\",\n    color: \"black\",\n  },\n};\n\nexport const darkTheme: typeof lightTheme = {\n  ...theme,\n  colors: {\n    background: \"#19181f\",\n    color: \"white\",\n  },\n};\n\nexport type Theme = typeof lightTheme;\n\nexport const styled = originalStyled as ThemedStyledInterface<\n  typeof lightTheme\n>;\n","import { data as symbols } from \"constants/symbology.json\";\nimport { css } from \"theme\";\n\nconst DEFAULT_SYMBOL_STYLES = css`\n  /* Copied from Scryfall */\n\n  display: inline-block;\n  margin: 1px 1px -1px 1px;\n  border-radius: 500px;\n  box-shadow: -1px 1px 0 rgb(0 0 0 / 85%);\n  text-indent: -999em;\n  overflow: hidden;\n  width: 15px;\n  height: 15px;\n  background-size: 100% 100%;\n  background-position: top left;\n`;\n\nexport function oracleTextToHTML(oracleText: string): string {\n  // Start with the base Oracle text wrapped in a p\n  let html = `<p>${oracleText}</p>`;\n\n  // Replace each newline with a fresh <p> tag\n  html = html.replaceAll(\"\\n\", \"</p><p>\");\n\n  // For reminder text, surround parenthesis with <i> tags\n  html = html.replaceAll(\"(\", \"<i>(\");\n  html = html.replaceAll(\")\", \")</i>\");\n\n  // Replace symbol text with SVGs;\n  symbols.forEach((symbol) => {\n    const abbrEl = `<abbr title=\"${symbol.english}\" style=\"background-image: url(${symbol.svg_uri}); ${DEFAULT_SYMBOL_STYLES}\">${symbol.symbol}</abbr>`;\n\n    html = html.replaceAll(symbol.symbol, abbrEl);\n  });\n\n  return html;\n}\n","import { fetchCard } from \"api/scryfall\";\nimport React, { useEffect, useState } from \"react\";\nimport { css, styled } from \"theme\";\nimport { ScryfallCard } from \"types/scryfall-card\";\nimport { oracleTextToHTML } from \"util/oracle-text-to-html\";\n\nconst Container = styled.div`\n  ${({ theme }) => css`\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: start;\n    @media (max-width: ${theme.device.tablet}) {\n      justify-content: center;\n    }\n\n    margin: 10px;\n  `}\n`;\n\nconst CardImage = styled.img`\n  ${({ theme }) => css`\n    width: 300px;\n    height: 418px;\n\n    background-color: ${theme.staticColors.cardBorder};\n    border-radius: 15px;\n  `}\n`;\n\nconst CardInfo = styled.div`\n  ${({ theme }) => css`\n    width: 440px;\n\n    margin-left: 10px;\n\n    @media (max-width: ${theme.device.tablet}) {\n      margin: 0;\n      flex-basis: 100%;\n    }\n  `}\n`;\n\nconst TitleLine = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst Title = styled.h2`\n  margin-right: 5px;\n`;\n\nconst ManaCost = styled.span`\n  margin-top: 6px;\n`;\n\nconst TypeLine = styled.p`\n  margin-top: 0;\n`;\n\ninterface Props {\n  scryfallId: string;\n}\n\nexport const Card: React.FC<Props> = ({ scryfallId }) => {\n  const [card, setCard] = useState<ScryfallCard>();\n\n  useEffect(() => {\n    (async () => {\n      const scryfallCard = await fetchCard(scryfallId);\n      setCard(scryfallCard);\n    })();\n  }, [scryfallId]);\n\n  return (\n    <Container>\n      <CardImage src={card?.imageUri} />\n      {card && (\n        <CardInfo>\n          <TitleLine>\n            <Title>{card.name}</Title>\n            <ManaCost\n              dangerouslySetInnerHTML={{\n                __html: oracleTextToHTML(card.manaCost),\n              }}\n            />\n          </TitleLine>\n          <TypeLine>{card.typeLine}</TypeLine>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: oracleTextToHTML(card.oracleText),\n            }}\n          />\n        </CardInfo>\n      )}\n    </Container>\n  );\n};\n","import { Card } from \"./Card\";\nexport default Card;\n","// These are the cards to show in the list. Maybe in the future we can be more dynamic\nexport const CARDS = [\n  // Anguished Unmaking\n  \"bbd79be1-3e84-41a3-89ae-b1132cb31ed9\",\n  // Assassin's Trophy\n  \"d00efb55-a859-408c-b727-6914584c06d2\",\n  // Burst of Lightning\n  \"1ac285cc-6862-4cc3-86ca-5523882855f4\",\n  // Cryptic Command\n  \"526607e9-1907-4639-b944-8ee152c81bfb\",\n  // Day of Judgment\n  \"aea87800-6725-4399-b489-651637e1804a\",\n  // Incinerate\n  \"f09dd696-8dff-41dd-b510-b2ad4c5d6c36\",\n  // Lightning Bolt\n  \"ff204024-20a5-4bb9-82b6-f6b4337efd60\",\n  // Mana Leak\n  \"dea41eb7-5828-4735-bca1-0dbb0fda04e3\",\n  // Preordain\n  \"d382c608-b3db-4112-b0c3-0e12199c4898\",\n  // Wrath of God\n  \"caff117f-844b-4d11-a104-930d7f238114\",\n];\n","import { Main } from \"./Main\";\nexport default Main;\n","import Card from \"components/Card\";\nimport { CARDS } from \"constants/cards\";\nimport React from \"react\";\n\nexport const Main: React.FC = () => {\n  return (\n    <>\n      {CARDS.map((scryfallId, idx) => (\n        <>\n          {idx > 0 && <hr />}\n          <Card key={idx} scryfallId={scryfallId} />\n        </>\n      ))}\n    </>\n  );\n};\n","import { createGlobalStyle, css } from \"styled-components\";\nimport { Theme } from \"./theme\";\n\nconst GlobalStyle = createGlobalStyle<{ theme: Theme }>`\n  ${({ theme }) => css`\n    body {\n      margin: 0;\n      font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\",\n        \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\",\n        \"Helvetica Neue\", sans-serif;\n      -webkit-font-smoothing: antialiased;\n      -moz-osx-font-smoothing: grayscale;\n\n      background: ${theme.colors.background};\n      color: ${theme.colors.color};\n    }\n  `}\n`;\n\nexport default GlobalStyle;\n","import Main from \"components/Main\";\nimport React, { useState } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\nimport { darkTheme, lightTheme } from \"theme\";\nimport GlobalStyle from \"theme/global-style\";\n\nconst App: React.FC = () => {\n  const darkModeMatch = window.matchMedia(\"(prefers-color-scheme: dark)\");\n  const [prefersDarkMode, setPrefersDarkMode] = useState(darkModeMatch.matches);\n  darkModeMatch.addEventListener(\"change\", (e) => {\n    setPrefersDarkMode(e.matches);\n  });\n\n  return (\n    <ThemeProvider theme={prefersDarkMode ? darkTheme : lightTheme}>\n      <GlobalStyle />\n      <Main />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"reportWebVitals\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}